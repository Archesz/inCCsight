[{"C:\\Users\\Usuario\\Desktop\\InCCsight\\Repo-InCCsight\\src\\index.js":"1","C:\\Users\\Usuario\\Desktop\\InCCsight\\Repo-InCCsight\\src\\pages\\Home.jsx":"2","C:\\Users\\Usuario\\Desktop\\InCCsight\\Repo-InCCsight\\src\\components\\Loading\\Loading.jsx":"3","C:\\Users\\Usuario\\Desktop\\InCCsight\\Repo-InCCsight\\src\\components\\Enter\\Enter.jsx":"4","C:\\Users\\Usuario\\Desktop\\InCCsight\\Repo-InCCsight\\src\\components\\SubjectCard\\SubjectCard.jsx":"5","C:\\Users\\Usuario\\Desktop\\InCCsight\\Repo-InCCsight\\src\\components\\ConfigModal\\ConfigModal.jsx":"6","C:\\Users\\Usuario\\Desktop\\InCCsight\\Repo-InCCsight\\src\\components\\Enter\\View.jsx":"7","C:\\Users\\Usuario\\Desktop\\InCCsight\\Repo-InCCsight\\src\\components\\View\\View.jsx":"8","C:\\Users\\Usuario\\Desktop\\InCCsight\\Repo-InCCsight\\src\\components\\Question\\Question.jsx":"9","C:\\Users\\Usuario\\Desktop\\InCCsight\\Repo-InCCsight\\src\\components\\FolderSelector\\FolderSelector.jsx":"10","C:\\Users\\Usuario\\Desktop\\InCCsight\\Repo-InCCsight\\src\\graphs\\Table\\TableSegmentation.jsx":"11","C:\\Users\\Usuario\\Desktop\\InCCsight\\Repo-InCCsight\\src\\graphs\\Radar\\Radar.jsx":"12","C:\\Users\\Usuario\\Desktop\\InCCsight\\Repo-InCCsight\\src\\graphs\\Boxplot\\BoxplotParcellation.jsx":"13","C:\\Users\\Usuario\\Desktop\\InCCsight\\Repo-InCCsight\\src\\graphs\\Table\\TableParcellation.jsx":"14","C:\\Users\\Usuario\\Desktop\\InCCsight\\Repo-InCCsight\\src\\graphs\\Boxplot\\BoxplotSegmentation.jsx":"15","C:\\Users\\Usuario\\Desktop\\InCCsight\\Repo-InCCsight\\src\\graphs\\Scatter\\Scatter.jsx":"16","C:\\Users\\Usuario\\Desktop\\InCCsight\\Repo-InCCsight\\src\\graphs\\Line\\Midline.jsx":"17","C:\\Users\\Usuario\\Desktop\\InCCsight\\Repo-InCCsight\\src\\graphs\\Boxplot\\Boxplot.jsx":"18","C:\\Users\\Usuario\\Desktop\\InCCsight\\Repo-InCCsight\\src\\components\\InfoTool\\InfoTool.jsx":"19","C:\\Users\\Usuario\\Desktop\\InCCsight\\Repo-InCCsight\\src\\components\\MultiSelect\\MultiSelect.jsx":"20","C:\\Users\\Usuario\\Desktop\\InCCsight\\temp\\inCCsightTest\\src\\index.js":"21","C:\\Users\\Usuario\\Desktop\\InCCsight\\temp\\inCCsightTest\\src\\pages\\Home.jsx":"22","C:\\Users\\Usuario\\Desktop\\InCCsight\\temp\\inCCsightTest\\src\\components\\Loading\\Loading.jsx":"23","C:\\Users\\Usuario\\Desktop\\InCCsight\\temp\\inCCsightTest\\src\\components\\Enter\\Enter.jsx":"24","C:\\Users\\Usuario\\Desktop\\InCCsight\\temp\\inCCsightTest\\src\\components\\SubjectCard\\SubjectCard.jsx":"25","C:\\Users\\Usuario\\Desktop\\InCCsight\\temp\\inCCsightTest\\src\\components\\ConfigModal\\ConfigModal.jsx":"26","C:\\Users\\Usuario\\Desktop\\InCCsight\\temp\\inCCsightTest\\src\\components\\View\\View.jsx":"27","C:\\Users\\Usuario\\Desktop\\InCCsight\\temp\\inCCsightTest\\src\\components\\Enter\\View.jsx":"28","C:\\Users\\Usuario\\Desktop\\InCCsight\\temp\\inCCsightTest\\src\\components\\Question\\Question.jsx":"29","C:\\Users\\Usuario\\Desktop\\InCCsight\\temp\\inCCsightTest\\src\\components\\FolderSelector\\FolderSelector.jsx":"30","C:\\Users\\Usuario\\Desktop\\InCCsight\\temp\\inCCsightTest\\src\\components\\MultiSelect\\MultiSelect.jsx":"31","C:\\Users\\Usuario\\Desktop\\InCCsight\\temp\\inCCsightTest\\src\\graphs\\Boxplot\\BoxplotParcellation.jsx":"32","C:\\Users\\Usuario\\Desktop\\InCCsight\\temp\\inCCsightTest\\src\\graphs\\Boxplot\\BoxplotSegmentation.jsx":"33","C:\\Users\\Usuario\\Desktop\\InCCsight\\temp\\inCCsightTest\\src\\graphs\\Line\\Midline.jsx":"34","C:\\Users\\Usuario\\Desktop\\InCCsight\\temp\\inCCsightTest\\src\\graphs\\Radar\\Radar.jsx":"35","C:\\Users\\Usuario\\Desktop\\InCCsight\\temp\\inCCsightTest\\src\\graphs\\Scatter\\Scatter.jsx":"36","C:\\Users\\Usuario\\Desktop\\InCCsight\\temp\\inCCsightTest\\src\\graphs\\Table\\TableSegmentation.jsx":"37","C:\\Users\\Usuario\\Desktop\\InCCsight\\temp\\inCCsightTest\\src\\graphs\\Table\\TableParcellation.jsx":"38","C:\\Users\\Usuario\\Desktop\\InCCsight\\temp\\inCCsightTest\\src\\graphs\\Boxplot\\Boxplot.jsx":"39","C:\\Users\\Usuario\\Desktop\\InCCsight\\temp\\inCCsightTest\\src\\components\\InfoTool\\InfoTool.jsx":"40"},{"size":796,"mtime":1681072353825,"results":"41","hashOfConfig":"42"},{"size":5814,"mtime":1681072353827,"results":"43","hashOfConfig":"42"},{"size":2129,"mtime":1681072353800,"results":"44","hashOfConfig":"42"},{"size":2025,"mtime":1681072353793,"results":"45","hashOfConfig":"42"},{"size":281,"mtime":1678683580032,"results":"46","hashOfConfig":"42"},{"size":4194,"mtime":1681074359028,"results":"47","hashOfConfig":"42"},{"size":5116,"mtime":1681072931638,"results":"48","hashOfConfig":"42"},{"size":7350,"mtime":1681074078549,"results":"49","hashOfConfig":"42"},{"size":447,"mtime":1678683580030,"results":"50","hashOfConfig":"42"},{"size":2439,"mtime":1681072353796,"results":"51","hashOfConfig":"42"},{"size":5848,"mtime":1681072353822,"results":"52","hashOfConfig":"42"},{"size":2997,"mtime":1678683580067,"results":"53","hashOfConfig":"42"},{"size":3621,"mtime":1678683580063,"results":"54","hashOfConfig":"42"},{"size":6343,"mtime":1678683580070,"results":"55","hashOfConfig":"42"},{"size":1552,"mtime":1681072353813,"results":"56","hashOfConfig":"42"},{"size":4965,"mtime":1681072353819,"results":"57","hashOfConfig":"42"},{"size":3144,"mtime":1678683580066,"results":"58","hashOfConfig":"42"},{"size":1057,"mtime":1681072353811,"results":"59","hashOfConfig":"42"},{"size":244,"mtime":1678683580028,"results":"60","hashOfConfig":"42"},{"size":1525,"mtime":1681072353802,"results":"61","hashOfConfig":"42"},{"size":796,"mtime":1681072353825,"results":"62","hashOfConfig":"63"},{"size":5814,"mtime":1681072353827,"results":"64","hashOfConfig":"63"},{"size":2129,"mtime":1681072353800,"results":"65","hashOfConfig":"63"},{"size":2025,"mtime":1681072353793,"results":"66","hashOfConfig":"63"},{"size":281,"mtime":1678683580032,"results":"67","hashOfConfig":"63"},{"size":4194,"mtime":1681074359028,"results":"68","hashOfConfig":"63"},{"size":7350,"mtime":1681074078549,"results":"69","hashOfConfig":"63"},{"size":5070,"mtime":1681193220866,"results":"70","hashOfConfig":"63"},{"size":447,"mtime":1678683580030,"results":"71","hashOfConfig":"63"},{"size":2439,"mtime":1681072353796,"results":"72","hashOfConfig":"63"},{"size":1541,"mtime":1681193293196,"results":"73","hashOfConfig":"63"},{"size":3621,"mtime":1678683580063,"results":"74","hashOfConfig":"63"},{"size":1552,"mtime":1681072353813,"results":"75","hashOfConfig":"63"},{"size":3144,"mtime":1678683580066,"results":"76","hashOfConfig":"63"},{"size":2997,"mtime":1678683580067,"results":"77","hashOfConfig":"63"},{"size":4965,"mtime":1681072353819,"results":"78","hashOfConfig":"63"},{"size":5848,"mtime":1681072353822,"results":"79","hashOfConfig":"63"},{"size":6343,"mtime":1678683580070,"results":"80","hashOfConfig":"63"},{"size":1057,"mtime":1681072353811,"results":"81","hashOfConfig":"63"},{"size":244,"mtime":1678683580028,"results":"82","hashOfConfig":"63"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"86"},"y2h9vy",{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"86"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"86"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"86"},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"127","messages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"129","messages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"131","messages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"11b0fqx",{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"139","messages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"143","messages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"145","messages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"147","messages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"149","messages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"151","messages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"153","messages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"159","messages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"161","messages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"163","messages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"165","messages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"167","messages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"169","messages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Usuario\\Desktop\\InCCsight\\Repo-InCCsight\\src\\index.js",["171"],"import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\n\r\nimport Enter from \"./components/Enter/Enter\";\r\nimport Home from './pages/Home'\r\nimport Loading from './components/Loading/Loading'\r\nimport './styles/global.scss'\r\n\r\nimport {\r\n  createBrowserRouter,\r\n  RouterProvider,\r\n} from \"react-router-dom\";\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\n\r\nconst router = createBrowserRouter([\r\n  {\r\n    path: \"/\",\r\n    element: <div className='container'> <Enter /></div>\r\n  },\r\n  {\r\n    path: \"/Loading\",\r\n    element: <div className='container'><Home /></div>\r\n  },\r\n  {\r\n    path: \"/Home\",\r\n    element: <div className='container'><Home /></div>\r\n  }\r\n])\r\n\r\nroot.render(\r\n  <React.StrictMode>\r\n    <RouterProvider router={router} />\r\n  </React.StrictMode>\r\n);",["172","173"],"C:\\Users\\Usuario\\Desktop\\InCCsight\\Repo-InCCsight\\src\\pages\\Home.jsx",[],"C:\\Users\\Usuario\\Desktop\\InCCsight\\Repo-InCCsight\\src\\components\\Loading\\Loading.jsx",["174"],"import React, { useState, useEffect } from 'react'\r\nimport './Loading.scss'\r\nimport { Dna } from  'react-loader-spinner'\r\n\r\nfunction Loading() {\r\n\r\n  const phrases = [\r\n    'The corpus callosum is the largest nerve fiber structure in the human brain. It contains about 200 million nerve fibers and weighs about 250 grams.',\r\n    'The corpus callosum was discovered by the Italian anatomist Luigi Rolando in 1809. He called it the \"cortical bridge\" because it connected the cortical areas of both cerebral hemispheres.',\r\n    \"The corpus callosum is responsible for allowing the transfer of sensory, motor and cognitive information between the cerebral hemispheres. That means it's important for functions like perception, language, learning, and memory.\",\r\n    'Some medical conditions, such as epilepsy, can be treated with surgery that cuts the corpus callosum. This is known as a callosotomy and is done to prevent epileptic activity from spreading from one hemisphere to the other.',\r\n    'Some research suggests that the size and shape of the corpus callosum may be related to gender differences. For example, studies indicate that the corpus callosum is proportionally larger in women than in men. Additionally, some research suggests that the corpus callosum may be more asymmetrical in men than in women.'\r\n  ]\r\n  \r\n  const [currentPhraseIndex, setCurrentPhraseIndex] = useState(0)\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setCurrentPhraseIndex(currentIndex => (currentIndex + 1) % phrases.length)\r\n    }, 1000)\r\n    return () => clearInterval(interval)\r\n  }, [phrases])\r\n\r\n  return (\r\n    <div className='loader-container' id='loading-container'>\r\n        <Dna\r\n          visible={true}\r\n          height=\"80\"\r\n          width=\"80\"\r\n          ariaLabel=\"dna-loading\"\r\n          wrapperStyle={{}}\r\n          wrapperClass=\"dna-wrapper\"\r\n        />\r\n      <span className='wait-phase'>Please wait a moment while we prepare everything.</span>\r\n      <span>Did you know?</span> \r\n      <span className='phrases'>{phrases[currentPhraseIndex]}</span>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Loading","C:\\Users\\Usuario\\Desktop\\InCCsight\\Repo-InCCsight\\src\\components\\Enter\\Enter.jsx",["175"],"import React, { useState } from 'react'\r\nimport '../../styles/global.scss'\r\nimport { Dna } from  'react-loader-spinner'\r\nimport './Enter.scss'\r\nimport logo from '../../assets/inccsight.png'\r\n\r\n// Icones\r\nimport { TbHome2, TbQuestionCircle, TbBrandGithub, TbNews, TbSettings } from 'react-icons/tb'\r\nimport View from './View'\r\nimport Loading from '../Loading/Loading'\r\n\r\nfunction Enter() {\r\n\r\n    localStorage.setItem(\"folders\", JSON.stringify([]));\r\n    \r\n    const [page, setPage] = useState(\"Input\")\r\n\r\n    function handleClick(icon, name) {\r\n        const icons = document.querySelectorAll('.enter-icon');\r\n\r\n        icons.forEach((i) => {\r\n            if (i === icon) {\r\n                i.classList.add('active');\r\n            } else {\r\n                i.classList.remove('active');\r\n            }\r\n        });\r\n\r\n        setPage(name)\r\n    }\r\n\r\n    return (\r\n        <div className='enter-container'>\r\n            <div className='loading-screen' id='loading-screen'>\r\n                <Loading/>\r\n            </div>\r\n\r\n            <div className='enter-header'>\r\n\r\n                <img src={logo} className='icon-logo' alt='Logo do inCCsight' />\r\n                <span className='icon-text'>InCCsight</span>\r\n            </div>\r\n\r\n            <div className='enter-body'>\r\n\r\n                <div className='enter-left'>\r\n\r\n                    <TbHome2 className=\"enter-icon active\" onClick={(e) => handleClick(e.target, \"Input\")}/>\r\n                    <TbQuestionCircle className=\"enter-icon\" onClick={(e) => handleClick(e.target, \"Help\")}/>\r\n                    <TbBrandGithub className=\"enter-icon\" onClick={(e) => handleClick(e.target, \"Github\")}/>\r\n                    <TbNews className=\"enter-icon\" onClick={(e) => handleClick(e.target, \"News\")}/>\r\n                    <TbSettings className=\"enter-icon\" onClick={(e) => handleClick(e.target, \"Settings\")}/>\r\n                    \r\n                </div>\r\n\r\n                <View type={page}/>\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Enter","C:\\Users\\Usuario\\Desktop\\InCCsight\\Repo-InCCsight\\src\\components\\SubjectCard\\SubjectCard.jsx",[],"C:\\Users\\Usuario\\Desktop\\InCCsight\\Repo-InCCsight\\src\\components\\ConfigModal\\ConfigModal.jsx",["176"],"import React, {useState} from 'react'\r\nimport './ConfigModal.scss'\r\nimport {AiOutlineClose} from 'react-icons/ai'\r\n\r\nfunction closeModal(root){\r\n    root.unmount();\r\n}\r\n\r\nfunction ConfigModal(props) {\r\n\r\n    const [page, setPage] = useState(\"Graphs\")\r\n    const graphs = [\"Scatter\", \"Line\", \"Bar\", \"Pie\", \"Bubble\", \"Table\", \"Sankey\", \"Boxplot\", \"Error Bar\"]\r\n\r\n    if(page === \"Graphs\"){\r\n        return (\r\n            <div id='modal-area'>\r\n                \r\n                <div className='modal-container'>\r\n                    \r\n                    <AiOutlineClose onClick={() => {closeModal(props.root)}} className=\"close-icon\"/>\r\n    \r\n                    <div className='modal-body'>\r\n    \r\n                        <div className='modal-left'>\r\n                            <span className='active'>Graphs and View</span>\r\n                            <span onClick={() => {setPage(\"settings\")}}>Settings</span>\r\n                            <span onClick={() => {setPage(\"methods\")}}>Methods</span>\r\n                            <span>User Preferences</span>\r\n                        </div>\r\n    \r\n                        <div className='modal-right'>\r\n    \r\n                            <div className='modal-right-view'>\r\n    \r\n                                <div className='input-group'>\r\n    \r\n                                    <label>Type of Graph</label>\r\n                                    <select>\r\n                                        {graphs.map((graph) => {\r\n                                            return(\r\n                                                <option value={graph}>{graph}</option>\r\n                                            )\r\n                                        })}\r\n                                    </select>\r\n    \r\n                                </div>\r\n    \r\n                                <div className='input-group'>\r\n                                    <label>Name</label>\r\n                                    <input type=\"text\"/>\r\n                                </div>\r\n    \r\n                                <button className='btn-apply'>Apply and Save</button>\r\n    \r\n                            </div>\r\n    \r\n                        </div>\r\n                                                \r\n                    </div>\r\n    \r\n                </div>\r\n    \r\n            </div>\r\n        )\r\n    } else if(page == \"methods\"){\r\n        return (\r\n            <div id='modal-area'>\r\n                \r\n                <div className='modal-container'>\r\n                    \r\n                    <AiOutlineClose onClick={() => {closeModal(props.root)}} className=\"close-icon\"/>\r\n    \r\n                    <div className='modal-body'>\r\n    \r\n                        <div className='modal-left'>\r\n                            <span className='active'>Graphs and View</span>\r\n                            <span onClick={() => {setPage(\"settings\")}}>Settings</span>\r\n                            <span>Methods</span>\r\n                            <span>User Preferences</span>\r\n                        </div>\r\n    \r\n                        <div className='modal-right'>\r\n    \r\n                            <div className='modal-right-view'>\r\n    \r\n                                <div className='input-group'>\r\n    \r\n                                    <label>Method of</label>\r\n                                    <select>\r\n                                        <option>Segmentation</option>\r\n                                        <option>Parcellation</option>\r\n                                    </select>\r\n    \r\n                                </div>\r\n    \r\n                                <div className='input-group'>\r\n                                    <label>Select  Method</label>\r\n                                    <input type=\"file\"/>\r\n                                </div>\r\n    \r\n                                <button className='btn-apply'>Apply and Save</button>\r\n    \r\n                            </div>\r\n    \r\n                        </div>\r\n                                                \r\n                    </div>\r\n    \r\n                </div>\r\n    \r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default ConfigModal","C:\\Users\\Usuario\\Desktop\\InCCsight\\Repo-InCCsight\\src\\components\\Enter\\View.jsx",["177"],"import React, { useState } from 'react'\r\nimport FolderSelector from '../FolderSelector/FolderSelector'\r\nimport { TbPlus, TbHistory} from 'react-icons/tb'\r\nimport Question from '../Question/Question';\r\nimport MultiSelect from '../MultiSelect/MultiSelect';\r\n\r\nconst { ipcRenderer } = window.require('electron');\r\n\r\nconst questions = [\r\n    { \"question\": \"How to enter data into the software?\", \"response\": \"To insert data into inCCsight, click on the 'Folder' icon on the home screen and select the folder containing the subjects to perform the analysis. Each 'Subject' must be a folder containing the eigenvalues ​​and eigenvectors files.Click '+' to add more subject sets.\" },\r\n    { \"question\": \"How to add more groups to be analyzed?\", \"response\": \"Se vira\" },\r\n    { \"question\": \"How to suggest modifications to the tool?\", \"response\": \"Se vira\" },\r\n    { \"question\": \"What are the current limitations of the tool?\", \"response\": \"Se vira\" },\r\n    { \"question\": \"How to add different charts?\", \"response\": \"Se vira\" }\r\n]\r\n\r\nfunction openWindow() {\r\n    ipcRenderer.send('open-window');\r\n}\r\n\r\nfunction View(props){\r\n\r\n    const [folders, setFolders] = useState([<FolderSelector key={1} id={1} />]);\r\n    const [filter, setFilter] = useState(\"\")\r\n\r\n    function startAnalyzes() {\r\n        let t = localStorage.getItem(\"folders\")\r\n        // window.startThais(t)\r\n        window.startROQS(t)\r\n        // openWindow();\r\n    }\r\n\r\n    async function startAnalyzes() {\r\n        \r\n        document.querySelector(\"#loading-screen\").style.display = \"flex\"\r\n        \r\n        let folders = JSON.parse(localStorage.getItem(\"folders\"))\r\n        \r\n        await window.startROQS(folders);\r\n        //await window.startThais(folders);\r\n        //await window.startJoany(folders);\r\n        \r\n        //await window.transformJson();\r\n\r\n        //openWindow();\r\n    }\r\n\r\n    async function loadLast(){\r\n        \r\n        // await window.transformJson();\r\n        openWindow()\r\n    }\r\n\r\n    function handleAddButtonClick() {\r\n        const newFolders = [\r\n            ...folders,\r\n            <FolderSelector key={folders.length + 1} id={folders.length + 1} />\r\n        ];\r\n        setFolders(newFolders);\r\n    }\r\n\r\n    const filteredQuestions = questions.filter((question) => {\r\n        const questionText = question[\"question\"].toLowerCase();\r\n        const responseText = question[\"response\"].toLowerCase();\r\n        const filterText = filter.toLowerCase();\r\n\r\n        return questionText.includes(filterText) || responseText.includes(filterText);\r\n    });\r\n\r\n    const handleChange = (event) => {\r\n        setFilter(event.target.value);\r\n    };\r\n\r\n    if (props.type === \"Input\") {\r\n        return (\r\n            <div className='enter-right'>\r\n\r\n                <MultiSelect />\r\n                <span className='enter-name'>Enter the folders you want to perform the analysis.</span>\r\n\r\n                <div className='folders-inputs'>\r\n\r\n                    {folders.map((folder) => folder)}\r\n\r\n                    <button className='add-btn' onClick={handleAddButtonClick}>\r\n                        <TbPlus className='add-icon' />\r\n                    </button>\r\n\r\n                </div>\r\n                \r\n                <div className='row-btns'>\r\n\r\n                    <div className='btn-history' onClick={loadLast}>\r\n                        <TbHistory className='icon-history'/>\r\n                        <span>Recent</span>\r\n                    </div>\r\n                    \r\n                    <button className='btn-start' onClick={startAnalyzes}>Run analyzes</button>\r\n                </div>\r\n                \r\n            </div>\r\n        )\r\n    } else if (props.type === \"Help\") {\r\n        return (\r\n            <div className='enter-question'>\r\n\r\n                <div className='search-field'>\r\n                    <span className='enter-name'>Most common questions about the tool.</span>\r\n\r\n                    <input\r\n                        className='search-input'\r\n                        placeholder='Ex: How insert data'\r\n                        value={filter}\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n\r\n                <div className='questions-container'>\r\n\r\n                    {filteredQuestions.map((question, index) => (\r\n                        <Question key={index} question={question.question} response={question.response} />\r\n                    ))}\r\n\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    } else if (props.type === \"Github\") {\r\n        return (\r\n            <div className='news-container'>\r\n\r\n                <span>Outras ferramentas e repositórios</span>\r\n\r\n            </div>\r\n        )\r\n    } else if (props.type === \"News\") {\r\n        return (\r\n            <div className='news-container'>\r\n\r\n                <span>Novas atualizações e ajustes</span>\r\n\r\n            </div>\r\n        )\r\n    } else if (props.type === \"Settings\") {\r\n        return (\r\n            <div className='news-container'>\r\n\r\n                <span>Configurações</span>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default View","C:\\Users\\Usuario\\Desktop\\InCCsight\\Repo-InCCsight\\src\\components\\View\\View.jsx",["178"],"import React from 'react'\r\n\r\n/* Componentes */\r\nimport TableSegmentation from '../../graphs/Table/TableSegmentation'\r\nimport TableParcellation from '../../graphs/Table/TableParcellation'\r\nimport BoxplotSegmentation from '../../graphs/Boxplot/BoxplotSegmentation'\r\nimport BoxplotParcellation from '../../graphs/Boxplot/BoxplotParcellation'\r\nimport Scatter from '../../graphs/Scatter/Scatter'\r\nimport Midline from '../../graphs/Line/Midline'\r\n\r\n/* Icones */\r\nimport {AiOutlineClose} from 'react-icons/ai'\r\n\r\nimport '../../styles/home.scss'\r\nimport Radar from '../../graphs/Radar/Radar'\r\n\r\nimport cc from '../../assets/images/ccimage.PNG'\r\n\r\nfunction View(props) {\r\n\r\n    function closeSelect(){\r\n        let subjectPainel = document.querySelector(\"#subjectPainel\");\r\n        subjectPainel.style.display = \"none\"\r\n    }\r\n\r\n\r\n    let data = props.data\r\n\r\n    if(props.view === \"2D\"){\r\n        return (\r\n            <div className='view-container' id=\"main-area\">\r\n                            \r\n                <div className='subject-select' id=\"subjectPainel\">      \r\n                    \r\n                    <div className='subject-image'>\r\n                        <span className='subject-name'>{data[0][\"Id\"]}</span>\r\n                        \r\n                        <div className='image'>\r\n                            <span className='msg-image'></span>\r\n                        </div>\r\n                        \r\n                        <div className='image-prompts'>\r\n                            <div className='image-inputs'>\r\n    \r\n                                <div className='input-group'>\r\n                                    <label>Segm. Method</label>\r\n                                    <select>\r\n                                        <option value=\"\">Watershed</option>\r\n                                        <option value=\"\">ROQS Based</option>\r\n                                        <option value=\"\">CNN Based</option>\r\n                                    </select>\r\n                                </div>\r\n    \r\n                                <div className='input-group'>\r\n                                    <label>Scalar</label>\r\n                                    <select>\r\n                                        <option value=\"wFA\">wFA</option>\r\n                                        <option value=\"FA\">FA</option>\r\n                                        <option value=\"MD\">MD</option>\r\n                                        <option value=\"RD\">RD</option>\r\n                                        <option value=\"AD\">AD</option>\r\n                                    </select>\r\n                                </div>\r\n    \r\n    \r\n                            </div>\r\n    \r\n                            <div className='image-buttons'>\r\n                                <button className='btn-remove'>Remove</button>\r\n                            </div>\r\n    \r\n    \r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <div className='subject-tables'>\r\n                        <TableSegmentation data={data} bg_color=\"#1F2C56\" color=\"white\" type=\"2D\"/>\r\n                        <TableParcellation data={data} bg_color=\"#1F2C56\" color=\"white\" type=\"2D\"/>\r\n                    </div>\r\n                    \r\n                    <AiOutlineClose className='close-icon' onClick={closeSelect}/>\r\n    \r\n                </div>\r\n    \r\n                <div className='area-view'>\r\n                    \r\n    \r\n                    <div className='area-table'>\r\n                        <TableSegmentation data={data} type=\"2D\"/>\r\n                        <TableParcellation data={data} type=\"2D\"/>\r\n                    </div>\r\n                        \r\n                    <div className='area-boxplot'>\r\n                        <BoxplotSegmentation data={data} />\r\n                        <BoxplotParcellation data={data} />\r\n                    </div>\r\n    \r\n                    <div className='area-scatter'>\r\n                        <Scatter data={data}/>\r\n                    </div>\r\n    \r\n                    <div className='area-midline'>\r\n                        <Midline data={data}/>\r\n                        <Radar data={data}/>\r\n                    </div>\r\n    \r\n                </div>\r\n    \r\n            </div>\r\n        )\r\n    } else if(props.view === \"3D\"){\r\n        return(\r\n            <div className='view-container' id=\"main-area\">\r\n                \r\n                <div className='subject-select' id=\"subjectPainel\">      \r\n                    \r\n                    <div className='subject-image'>\r\n                        <span className='subject-name'>3D: {data[0][\"Id\"]}</span>\r\n                        \r\n                        <div className='image'>\r\n                            <span className='msg-image'></span>\r\n                        </div>\r\n                        \r\n                        <div className='image-prompts'>\r\n                            <div className='image-inputs'>\r\n    \r\n                                <div className='input-group'>\r\n                                    <label>Segm. Method</label>\r\n                                    <select>\r\n                                        <option value=\"\">Watershed</option>\r\n                                        <option value=\"\">ROQS</option>\r\n                                        <option value=\"\">CNN Based</option>\r\n                                    </select>\r\n                                </div>\r\n    \r\n                                <div className='input-group'>\r\n                                    <label>Scalar</label>\r\n                                    <select>\r\n                                        <option value=\"wFA\">wFA</option>\r\n                                        <option value=\"FA\">FA</option>\r\n                                        <option value=\"MD\">MD</option>\r\n                                        <option value=\"RD\">RD</option>\r\n                                        <option value=\"AD\">AD</option>\r\n                                    </select>\r\n                                </div>\r\n    \r\n    \r\n                            </div>\r\n    \r\n                            <div className='image-buttons'>\r\n                                <button className='btn-3d' onClick={window.viewBrain}>Volumetric View</button>\r\n                                <button className='btn-remove'>Remove</button>\r\n                            </div>\r\n    \r\n    \r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <div className='subject-tables'>\r\n                        <TableSegmentation data={data} bg_color=\"#1F2C56\" color=\"white\" type=\"3D\"/>\r\n                        <TableParcellation data={data} bg_color=\"#1F2C56\" color=\"white\" type=\"3D\"/>\r\n                    </div>\r\n                    \r\n                    <AiOutlineClose className='close-icon' onClick={closeSelect}/>\r\n    \r\n                </div>\r\n    \r\n                <div className='area-view'>\r\n                    \r\n    \r\n                    <div className='area-table'>\r\n                        <TableSegmentation data={data} type=\"3D\"/>\r\n                        <TableParcellation data={data} type=\"3D\"/>\r\n                    </div>\r\n    \r\n                </div>\r\n    \r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default View","C:\\Users\\Usuario\\Desktop\\InCCsight\\Repo-InCCsight\\src\\components\\Question\\Question.jsx",[],"C:\\Users\\Usuario\\Desktop\\InCCsight\\Repo-InCCsight\\src\\components\\FolderSelector\\FolderSelector.jsx",[],"C:\\Users\\Usuario\\Desktop\\InCCsight\\Repo-InCCsight\\src\\graphs\\Table\\TableSegmentation.jsx",["179","180","181","182"],"import React, {useState} from 'react'\r\nimport Plot from 'react-plotly.js'\r\nimport InfoTool from '../../components/InfoTool/InfoTool'\r\nimport './TableSegmentation.scss'\r\n\r\nimport { TbEyeFilled, TbEyeOff } from 'react-icons/tb'\r\n\r\nfunction getMeanValues(subjects, method, scalar){\r\n    let value = 0\r\n    subjects.map((subject) => {\r\n        return(\r\n            value += subject[method][scalar]\r\n        )\r\n    })\r\n\r\n    value /= (subjects.length);\r\n    return value.toFixed(6)\r\n}\r\n\r\nfunction TableSegmentation(props) {\r\n\r\n    let [view, setView] = useState(\"hide\")\r\n    let [size, setSize] = useState(130)\r\n    let [iconEye, setIconEye] = useState(<TbEyeFilled />)\r\n\r\n    function changeShowSegmentation(type) {\r\n        let value = document.querySelector(\"#showView2D\").value\r\n        console.log(value);\r\n    }\r\n\r\n    function teste(){\r\n        if(view == \"hide\"){\r\n            setView(\"show\")\r\n            setIconEye(<TbEyeOff />)\r\n        } else{\r\n            setView(\"hide\")\r\n            setIconEye(<TbEyeFilled />)\r\n        }\r\n    }\r\n\r\n        //if(view === \"show\"){\r\n        //    setSize(160)\r\n        //} else{\r\n        //    setSize(130)\r\n        //}\r\n\r\n    /* Remover depois */\r\n    let joany = [0.6556650233259003, 0.248837988995943, 0.0010308019022138776, 0.0004797977367285885, 0.0006192081277246568, 0.0005655540233389842, 0.0018539894511923193, 0.0004405055082694843]\r\n\r\n\r\n    let headers = []\r\n    /* Selecionando os dados */\r\n    let subjects = props.data\r\n    if(view === \"show\"){\r\n        headers = [\"Method\", \"FA\", \"FA StdDev\",\"MD\", \"MD StdDev\", \"RD\", \"RD StdDev\", \"AD\", \"AD StdDev\"]\r\n    } else if(view === \"hide\"){\r\n        headers = [\"Method\", \"FA\", \"MD\", \"RD\", \"AD\"]\r\n    }\r\n\r\n    let cols = [[\"ROQS\", \"Watershed-Based\", \"CNN-Based\"]]\r\n\r\n    for(let i = 1; i !== headers.length; i++){\r\n        let v1 = getMeanValues(subjects, \"ROQS_scalar\", headers[i])\r\n        let v2 = getMeanValues(subjects, \"Watershed_scalar\", headers[i])\r\n        let v3 = getMeanValues(subjects, \"santarosa_scalars\", headers[i])\r\n        cols.push([v1, v2, v3])\r\n    }\r\n    \r\n    /* Ajustes da tabela */\r\n    \r\n    let layout = {width: \"50%\", height: size, margin: {t: 10, b: 0, l: 10, r: 10}, paper_bgcolor: props.bg_color}\r\n\r\n    if(props.type === \"2D\"){\r\n\r\n        let data = [{\r\n            type: \"table\",\r\n            header: {\r\n                values: headers,\r\n                align: [\"center\"],\r\n                line: {width: 1, color: 'black'},\r\n                fill: {color: \"grey\"},\r\n                font: {family: \"Arial\", size: 14, color: \"white\"}\r\n            },\r\n            cells: {\r\n                values: cols,\r\n                height: 30,\r\n                align: [\"center\", \"center\"],\r\n                line: {width: 1, color: 'black'},\r\n                font: {family: \"Arial\", size: 12, color: \"black\"}    \r\n            }\r\n        }]\r\n\r\n        return(\r\n\r\n            <div className='table-field'>\r\n                    \r\n                <div className='table-row'>\r\n                    <span className={`table-title ${props.color}`}>Segmentation Data <InfoTool text=\"Comparison of the mean values ​​obtained by segmentation in each method.\"/></span>\r\n                    <button className='btn-export'>Export</button>\r\n                </div>\r\n    \r\n                <Plot data={data} layout={layout}/>\r\n            \r\n                <div className='options-row'>  \r\n            \r\n                    <div className='select-group'>\r\n                        <label className={props.color}>Std. Dev: </label>\r\n\r\n                        <button onClick={teste} className=\"btn-icon\">{iconEye}</button>\r\n\r\n                    </div>\r\n            \r\n                </div>\r\n    \r\n            </div>\r\n        )\r\n    } else if(props.type === \"3D\"){\r\n\r\n        let joany = [0.6556650233259003, 0.248837988995943, 0.0010308019022138776, 0.0004797977367285885, 0.0006192081277246568, 0.0005655540233389842, 0.0018539894511923193, 0.0004405055082694843]\r\n        let cols = [[\"CNN-Based\"]]\r\n\r\n        for(let i = 1; i !== headers.length; i++){\r\n            let v1 = getMeanValues(subjects, \"santarosa_scalars\", headers[i])\r\n            cols.push([v1])\r\n        }\r\n\r\n        let data = [{\r\n            type: \"table\",\r\n            header: {\r\n                values: headers,\r\n                align: [\"center\"],\r\n                line: {width: 1, color: 'black'},\r\n                fill: {color: \"grey\"},\r\n                font: {family: \"Arial\", size: 14, color: \"white\"}\r\n            },\r\n            cells: {\r\n                values: cols,\r\n                height: 30,\r\n                align: [\"center\", \"center\"],\r\n                line: {width: 1, color: 'black'},\r\n                font: {family: \"Arial\", size: 12, color: \"black\"}    \r\n            }\r\n        }]\r\n\r\n        return(\r\n\r\n            <div className='table-field'>\r\n                    \r\n                <div className='table-row'>\r\n                    <span className={`table-title ${props.color}`}>Segmentation Data <InfoTool text=\"Comparison of the mean values ​​obtained by segmentation in each method.\"/></span>\r\n                    <button className='btn-export'>Export</button>\r\n                </div>\r\n    \r\n                <Plot data={data} layout={layout}/>\r\n            \r\n                <div className='options-row'>  \r\n            \r\n                    <div className='select-group'>\r\n                        <label className={props.color}>Std. Dev: </label>\r\n                        <select onChange={() => {changeShowSegmentation(\"3D\")}} id=\"show\">\r\n                            <option value=\"hide\">Hide</option>\r\n                            <option value=\"show\">Show</option>\r\n                        </select>\r\n                    </div>\r\n            \r\n                </div>\r\n    \r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default TableSegmentation","C:\\Users\\Usuario\\Desktop\\InCCsight\\Repo-InCCsight\\src\\graphs\\Radar\\Radar.jsx",[],"C:\\Users\\Usuario\\Desktop\\InCCsight\\Repo-InCCsight\\src\\graphs\\Boxplot\\BoxplotParcellation.jsx",[],"C:\\Users\\Usuario\\Desktop\\InCCsight\\Repo-InCCsight\\src\\graphs\\Table\\TableParcellation.jsx",[],"C:\\Users\\Usuario\\Desktop\\InCCsight\\Repo-InCCsight\\src\\graphs\\Boxplot\\BoxplotSegmentation.jsx",[],"C:\\Users\\Usuario\\Desktop\\InCCsight\\Repo-InCCsight\\src\\graphs\\Scatter\\Scatter.jsx",[],"C:\\Users\\Usuario\\Desktop\\InCCsight\\Repo-InCCsight\\src\\graphs\\Line\\Midline.jsx",[],"C:\\Users\\Usuario\\Desktop\\InCCsight\\Repo-InCCsight\\src\\graphs\\Boxplot\\Boxplot.jsx",[],"C:\\Users\\Usuario\\Desktop\\InCCsight\\Repo-InCCsight\\src\\components\\InfoTool\\InfoTool.jsx",[],"C:\\Users\\Usuario\\Desktop\\InCCsight\\Repo-InCCsight\\src\\components\\MultiSelect\\MultiSelect.jsx",[],"C:\\Users\\Usuario\\Desktop\\InCCsight\\temp\\inCCsightTest\\src\\index.js",["183"],"C:\\Users\\Usuario\\Desktop\\InCCsight\\temp\\inCCsightTest\\src\\pages\\Home.jsx",[],"C:\\Users\\Usuario\\Desktop\\InCCsight\\temp\\inCCsightTest\\src\\components\\Loading\\Loading.jsx",["184"],"C:\\Users\\Usuario\\Desktop\\InCCsight\\temp\\inCCsightTest\\src\\components\\Enter\\Enter.jsx",["185"],"C:\\Users\\Usuario\\Desktop\\InCCsight\\temp\\inCCsightTest\\src\\components\\SubjectCard\\SubjectCard.jsx",[],"C:\\Users\\Usuario\\Desktop\\InCCsight\\temp\\inCCsightTest\\src\\components\\ConfigModal\\ConfigModal.jsx",["186"],"C:\\Users\\Usuario\\Desktop\\InCCsight\\temp\\inCCsightTest\\src\\components\\View\\View.jsx",["187"],"C:\\Users\\Usuario\\Desktop\\InCCsight\\temp\\inCCsightTest\\src\\components\\Enter\\View.jsx",["188"],"C:\\Users\\Usuario\\Desktop\\InCCsight\\temp\\inCCsightTest\\src\\components\\Question\\Question.jsx",[],"C:\\Users\\Usuario\\Desktop\\InCCsight\\temp\\inCCsightTest\\src\\components\\FolderSelector\\FolderSelector.jsx",["189","190"],"C:\\Users\\Usuario\\Desktop\\InCCsight\\temp\\inCCsightTest\\src\\components\\MultiSelect\\MultiSelect.jsx",[],"C:\\Users\\Usuario\\Desktop\\InCCsight\\temp\\inCCsightTest\\src\\graphs\\Boxplot\\BoxplotParcellation.jsx",[],"C:\\Users\\Usuario\\Desktop\\InCCsight\\temp\\inCCsightTest\\src\\graphs\\Boxplot\\BoxplotSegmentation.jsx",[],"C:\\Users\\Usuario\\Desktop\\InCCsight\\temp\\inCCsightTest\\src\\graphs\\Line\\Midline.jsx",[],"C:\\Users\\Usuario\\Desktop\\InCCsight\\temp\\inCCsightTest\\src\\graphs\\Radar\\Radar.jsx",[],"C:\\Users\\Usuario\\Desktop\\InCCsight\\temp\\inCCsightTest\\src\\graphs\\Scatter\\Scatter.jsx",[],"C:\\Users\\Usuario\\Desktop\\InCCsight\\temp\\inCCsightTest\\src\\graphs\\Table\\TableSegmentation.jsx",["191","192","193","194"],"C:\\Users\\Usuario\\Desktop\\InCCsight\\temp\\inCCsightTest\\src\\graphs\\Table\\TableParcellation.jsx",[],"C:\\Users\\Usuario\\Desktop\\InCCsight\\temp\\inCCsightTest\\src\\graphs\\Boxplot\\Boxplot.jsx",[],"C:\\Users\\Usuario\\Desktop\\InCCsight\\temp\\inCCsightTest\\src\\components\\InfoTool\\InfoTool.jsx",[],{"ruleId":"195","severity":1,"message":"196","line":6,"column":8,"nodeType":"197","messageId":"198","endLine":6,"endColumn":15},{"ruleId":"199","replacedBy":"200"},{"ruleId":"201","replacedBy":"202"},{"ruleId":"203","severity":1,"message":"204","line":7,"column":9,"nodeType":"205","endLine":13,"endColumn":4},{"ruleId":"195","severity":1,"message":"206","line":3,"column":10,"nodeType":"197","messageId":"198","endLine":3,"endColumn":13},{"ruleId":"207","severity":1,"message":"208","line":65,"column":20,"nodeType":"209","messageId":"210","endLine":65,"endColumn":22},{"ruleId":"211","severity":1,"message":"212","line":33,"column":20,"nodeType":"197","messageId":"213","endLine":33,"endColumn":33},{"ruleId":"195","severity":1,"message":"214","line":17,"column":8,"nodeType":"197","messageId":"198","endLine":17,"endColumn":10},{"ruleId":"195","severity":1,"message":"215","line":23,"column":16,"nodeType":"197","messageId":"198","endLine":23,"endColumn":23},{"ruleId":"207","severity":1,"message":"208","line":32,"column":17,"nodeType":"209","messageId":"210","endLine":32,"endColumn":19},{"ruleId":"195","severity":1,"message":"216","line":48,"column":9,"nodeType":"197","messageId":"198","endLine":48,"endColumn":14},{"ruleId":"195","severity":1,"message":"216","line":119,"column":13,"nodeType":"197","messageId":"198","endLine":119,"endColumn":18},{"ruleId":"195","severity":1,"message":"196","line":6,"column":8,"nodeType":"197","messageId":"198","endLine":6,"endColumn":15},{"ruleId":"203","severity":1,"message":"204","line":7,"column":9,"nodeType":"205","endLine":13,"endColumn":4},{"ruleId":"195","severity":1,"message":"206","line":3,"column":10,"nodeType":"197","messageId":"198","endLine":3,"endColumn":13},{"ruleId":"207","severity":1,"message":"208","line":65,"column":20,"nodeType":"209","messageId":"210","endLine":65,"endColumn":22},{"ruleId":"195","severity":1,"message":"214","line":17,"column":8,"nodeType":"197","messageId":"198","endLine":17,"endColumn":10},{"ruleId":"211","severity":1,"message":"212","line":33,"column":20,"nodeType":"197","messageId":"213","endLine":33,"endColumn":33},{"ruleId":"195","severity":1,"message":"217","line":6,"column":12,"nodeType":"197","messageId":"198","endLine":6,"endColumn":22},{"ruleId":"207","severity":1,"message":"208","line":26,"column":30,"nodeType":"209","messageId":"210","endLine":26,"endColumn":32},{"ruleId":"195","severity":1,"message":"215","line":23,"column":16,"nodeType":"197","messageId":"198","endLine":23,"endColumn":23},{"ruleId":"207","severity":1,"message":"208","line":32,"column":17,"nodeType":"209","messageId":"210","endLine":32,"endColumn":19},{"ruleId":"195","severity":1,"message":"216","line":48,"column":9,"nodeType":"197","messageId":"198","endLine":48,"endColumn":14},{"ruleId":"195","severity":1,"message":"216","line":119,"column":13,"nodeType":"197","messageId":"198","endLine":119,"endColumn":18},"no-unused-vars","'Loading' is defined but never used.","Identifier","unusedVar","no-native-reassign",["218"],"no-negated-in-lhs",["219"],"react-hooks/exhaustive-deps","The 'phrases' array makes the dependencies of useEffect Hook (at line 22) change on every render. To fix this, wrap the initialization of 'phrases' in its own useMemo() Hook.","VariableDeclarator","'Dna' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-redeclare","'startAnalyzes' is already defined.","redeclared","'cc' is defined but never used.","'setSize' is assigned a value but never used.","'joany' is assigned a value but never used.","'folderPath' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]